name: APK-TV Build

on:
  schedule:
    - cron: 15,45 0-18,22-23 * * *
  workflow_dispatch:
    inputs:
      rebuild:
        description: '忽略构建记录以重新构建'
        required: false
        type: boolean
      donotpublish:
        description: '构建后不提交发布新版'
        required: false
        type: boolean
      testOption:
        description: 'arm64支持，不支持ijk解码'
        required: false
        type: boolean

env:
  userName: leftchest
  repoName: TV
  branchName: release
  appName: TV

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      commit: ${{ env.commit }}
      tag: ${{ env.tag }}
      ESCAPED: ${{ env.ESCAPED }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check New Commit
        run: |
          upStream=https://github.com/${{ env.userName }}/${{ env.repoName }}
          echo "upStream=$upStream" >> $GITHUB_ENV
          commit=$(curl -sL $upStream/commits/${{ env.branchName }} |grep -o "/${{ env.userName }}/${{ env.repoName }}/commit/[a-z0-9]\+" |head -1 | cut -d\/ -f5)
          if ! git log --oneline |grep -q "$commit"; then
            echo "commit=$commit" >> $GITHUB_ENV
            echo "commitS=${commit:0:7}" >> $GITHUB_ENV
            lastCommit=`git log --oneline |grep -o '[a-z0-9]\{40\}' |head -1`
            echo "lastCommit=$lastCommit" >> $GITHUB_ENV
            echo "lastCommitS=${lastCommit:0:7}" >> $GITHUB_ENV
          fi
      - name: Checkout Source Code
        if: ${{ env.commit }}
        run: |
          git clone ${{ env.upStream }} ${{ env.repoName }}
          cd ${{ env.repoName }}
          git checkout ${{ env.commit }}
          #zip
          zip -q -x ".git/*" -r ${{ env.commitS }}-source.zip .
          #tag
          tag="$(git log --date=format:'%Y%m%d-%H%M' --pretty=format:%cd ${{ env.commitS }} -1)"
          echo "tag=$tag" >> $GITHUB_ENV
      - name: Release Changelog
        if: ${{ env.commit }}
        working-directory: ${{ env.repoName }}
        run: |        
          export LESSCHARSET=utf-8
          if [ "${{ env.commit }}" == "${{ env.lastCommit }}" ]; then
            COMMIT_MESSAGE="$(python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))"  "`git log --pretty=format:%B ${{ env.commitS }} -1 |sed -e 's# \{2,\}#\n#g' -e '/^Merge pull/d' -e 's#"#\\"#g' -e '/^$/d' |cat -n |sort -k2,2 -k1,1n |uniq -f1 |sort -k1,1n |cut -f2- `")"
          else
            COMMIT_MESSAGE="$(python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))"  "`git log --pretty=format:%B ${{ env.commitS }}...${{ env.lastCommit }} |sed -e 's# \{2,\}#\n#g' -e '/^Merge pull/d' -e 's#"#\\"#g' -e '/^$/d' |cat -n |sort -k2,2 -k1,1n |uniq -f1 |sort -k1,1n |cut -f2- `")"
          fi
          if [ ${#COMMIT_MESSAGE} -gt 0 ] && [ ${#COMMIT_MESSAGE} -le 1024 ]; then
            ESCAPED=$(echo $COMMIT_MESSAGE |sed 's#%[eE]2[0-9a-zA-Z%]\{6\}##g')
          else
            COMMIT_URL=${{ env.upStream }}/commits/${{ env.branchName }}
            ESCAPED="$(python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))" "$COMMIT_URL")"
          fi
          echo "ESCAPED=$ESCAPED" >> $GITHUB_ENV
      - name: Upload Sourcecode To Artifact
        uses: actions/upload-artifact@v3
        if: ${{ env.commit }}
        with:
          name: ${{ env.tag }}-source
          path: ${{ env.repoName }}/*-source.zip
  build:
    needs: prepare
    if: needs.prepare.outputs.tag
    strategy:
      matrix:
        product: [ leanbackJava ]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      product: ${{ matrix.product }}
      tag: ${{ needs.prepare.outputs.tag }}
    outputs:
      buildResult: ${{ env.buildResult }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
      - name: Unzip Code
        run: |
          unzip -d source/ *-source/*-source.zip
          rm -rf *-source/
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ env.userName }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.userName }}-
      - name: Release Apk Sign
        if: ${{ env.commit }}
        working-directory: source/
        run: |
          signingConfigs='ICAgIHNpZ25pbmdDb25maWdzIHtcCiAgICAgICAgaWYgKHByb2plY3QuaGFzUHJvcGVydHkoIlJFTEVBU0VfU1RPUkVfRklMRSIpKSB7XAogICAgICAgICAgICBteUNvbmZpZyB7XAogICAgICAgICAgICAgICAgc3RvcmVGaWxlIGZpbGUoUkVMRUFTRV9TVBoxOSCE9SRV9GSUxFKVwKICAgICAgICAgICAgICAgIHN0b3JlUGFzc3dvcmQgUkVMRUFTRV9TVBoxOSCE9SRV9QQVNTVBoxOSC09SRFwKICAgICAgICAgICAgICAgIGtleUFsaWFzIFJFTEVBU0VfS0VZX0FMSUFTXAogICAgICAgICAgICAgICAga2V5UGFzc3dvcmQgUkVMRUFTRV9LRVlfUEFTU1dPUkRcCiAgICAgICAgICAgICAgICB2MVNpZ25pbmdFbmFibGVkIHRydWVcCiAgICAgICAgICAgICAgICB2MlNpZ25pbmdFbmFibGVkIHRydWVcCiAgICAgICAgICAgICAgICBlbmFibGVWM1NpZ25pbmcgPSB0cnVlXAogICAgICAgICAgICAgICAgZW5hYmxlVjRTaWduaW5nID0gdHJ1ZVwKICAgICAgICAgICAgfVwKICAgICAgICB9XAogICAgfVwKXA=='
          signingConfig='ICAgICAgICAgICAgaWYgKHByb2plY3QuaGFzUHJvcGVydHkoIlJFTEVBU0VfU1RPUkVfRklMRSIpKSB7XAogICAgICAgICAgICAgICAgc2lnbmluZ0NvbmZpZyBzaWduaW5nQ29uZmlncy5teUNvbmZpZ1wKICAgICAgICAgICAgfVwK'
          signingConfigs="$(echo "$signingConfigs" |base64 -d )"
          signingConfig="$(echo "$signingConfig" |base64 -d )"
          sed -i -e "/defaultConfig {/i\\$signingConfigs " -e "/debug {/a\\$signingConfig " -e "/release {/a\\$signingConfig " app/build.gradle
          cp -f ${{ github.workspace }}/.github/workflows/TVBoxOSC.jks app/TVBoxOSC.jks
          sed -i '$a\RELEASE_STORE_FILE=./TVBoxOSC.jks'     ./gradle.properties
          sed -i '$a\RELEASE_KEY_ALIAS=TVBoxOSC'            ./gradle.properties
          sed -i '$a\RELEASE_STORE_PASSWORD=TVBoxOSC'       ./gradle.properties
          sed -i '$a\RELEASE_KEY_PASSWORD=TVBoxOSC'         ./gradle.properties      
      - name: Build With Gradle
        continue-on-error: true
        working-directory: source/
        run: |
          chmod +x gradlew
          ./gradlew assemble${{ env.product }}release --build-cache --parallel --daemon --warning-mode all
      - name: Prepare App
        run: |
          mkdir -p apk/
          for file in `find ~ -name "*.apk" -print`; do
            mv "$file" apk/${{ env.appName }}_${{ env.product }}_${{ env.tag }}.apk
            echo "buildResult=yes" >> $GITHUB_ENV
          done
      - name: Upload App To Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.appName }}_${{ env.product }}_${{ env.tag }}
          path: apk/*.apk

  upload:
    needs: [ prepare, build ]
    if: needs.build.outputs.buildResult == 'yes'
    runs-on: ubuntu-latest
    env:
      commit: ${{ needs.prepare.outputs.commit }}
      tag: ${{ needs.prepare.outputs.tag }}
      ESCAPED: ${{ needs.prepare.outputs.ESCAPED }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: artifacts/
      - name: Prepare Files 
        run: |
          mkdir apk
          find artifacts -name "*.*" -exec cp {} apk \;
          rm -rf artifacts/
      - name: Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.tag }}
          tag_name: ${{ env.tag }}
          body: ${{ env.commit }}
          files: |
            apk/*.apk
            apk/*-source.zip
                    
            fi
          fi
